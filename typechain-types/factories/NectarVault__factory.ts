/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from '../../deps.ts'
import type { Provider, TransactionRequest } from '../../deps.ts'

import type { PromiseOrValue } from '../common.ts'
import type { NectarVault, NectarVaultInterface } from '../NectarVault.ts'

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'Withdrawal',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'recipients_',
        type: 'address[]',
      },
      {
        internalType: 'uint256[]',
        name: 'amounts_',
        type: 'uint256[]',
      },
    ],
    name: 'deposit',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
    ],
    name: 'totalDepositsFor',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405234801561001057600080fd5b50610e16806100206000396000f3fe60806040526004361061003f5760003560e01c8063214e3f2e146100445780633ccfd60b1461008157806370a0823114610098578063efc908a1146100d5575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906106c8565b6100f1565b604051610078919061070e565b60405180910390f35b34801561008d57600080fd5b5061009661013a565b005b3480156100a457600080fd5b506100bf60048036038101906100ba91906106c8565b610338565b6040516100cc919061070e565b60405180910390f35b6100ef60048036038101906100ea9190610971565b610380565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061014461064e565b905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116101c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101be90610a46565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008273ffffffffffffffffffffffffffffffffffffffff168260405161027490610a97565b60006040518083038185875af1925050503d80600081146102b1576040519150601f19603f3d011682016040523d82523d6000602084013e6102b6565b606091505b50509050806102fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f190610b1e565b60405180910390fd5b7f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65838360405161032b929190610b4d565b60405180910390a1505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008251116103c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bb90610bc2565b60405180910390fd5b8051825114610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff90610c54565b60405180910390fd5b6000805b83518110156106065782818151811061042857610427610c74565b5b602002602001015160008086848151811061044657610445610c74565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104939190610cd2565b6000808684815181106104a9576104a8610c74565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082818151811061050257610501610c74565b5b60200260200101516001600086848151811061052157610520610c74565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461056e9190610cd2565b6001600086848151811061058557610584610c74565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508281815181106105de576105dd610c74565b5b6020026020010151826105f19190610cd2565b915080806105fe90610d06565b91505061040c565b50803414610649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064090610dc0565b60405180910390fd5b505050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106958261066a565b9050919050565b6106a58161068a565b81146106b057600080fd5b50565b6000813590506106c28161069c565b92915050565b6000602082840312156106de576106dd610660565b5b60006106ec848285016106b3565b91505092915050565b6000819050919050565b610708816106f5565b82525050565b600060208201905061072360008301846106ff565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107778261072e565b810181811067ffffffffffffffff821117156107965761079561073f565b5b80604052505050565b60006107a9610656565b90506107b5828261076e565b919050565b600067ffffffffffffffff8211156107d5576107d461073f565b5b602082029050602081019050919050565b600080fd5b60006107fe6107f9846107ba565b61079f565b90508083825260208201905060208402830185811115610821576108206107e6565b5b835b8181101561084a578061083688826106b3565b845260208401935050602081019050610823565b5050509392505050565b600082601f83011261086957610868610729565b5b81356108798482602086016107eb565b91505092915050565b600067ffffffffffffffff82111561089d5761089c61073f565b5b602082029050602081019050919050565b6108b7816106f5565b81146108c257600080fd5b50565b6000813590506108d4816108ae565b92915050565b60006108ed6108e884610882565b61079f565b905080838252602082019050602084028301858111156109105761090f6107e6565b5b835b81811015610939578061092588826108c5565b845260208401935050602081019050610912565b5050509392505050565b600082601f83011261095857610957610729565b5b81356109688482602086016108da565b91505092915050565b6000806040838503121561098857610987610660565b5b600083013567ffffffffffffffff8111156109a6576109a5610665565b5b6109b285828601610854565b925050602083013567ffffffffffffffff8111156109d3576109d2610665565b5b6109df85828601610943565b9150509250929050565b600082825260208201905092915050565b7f4e6f2066756e647320746f207769746864726177000000000000000000000000600082015250565b6000610a306014836109e9565b9150610a3b826109fa565b602082019050919050565b60006020820190508181036000830152610a5f81610a23565b9050919050565b600081905092915050565b50565b6000610a81600083610a66565b9150610a8c82610a71565b600082019050919050565b6000610aa282610a74565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000610b08603a836109e9565b9150610b1382610aac565b604082019050919050565b60006020820190508181036000830152610b3781610afb565b9050919050565b610b478161068a565b82525050565b6000604082019050610b626000830185610b3e565b610b6f60208301846106ff565b9392505050565b7f526563697069656e747320617272617920697320656d70747900000000000000600082015250565b6000610bac6019836109e9565b9150610bb782610b76565b602082019050919050565b60006020820190508181036000830152610bdb81610b9f565b9050919050565b7f526563697069656e747320616e6420616d6f756e74732061727261797320617260008201527f65206e6f74206f6620657175616c206c656e6774680000000000000000000000602082015250565b6000610c3e6035836109e9565b9150610c4982610be2565b604082019050919050565b60006020820190508181036000830152610c6d81610c31565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cdd826106f5565b9150610ce8836106f5565b9250828201905080821115610d0057610cff610ca3565b5b92915050565b6000610d11826106f5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d4357610d42610ca3565b5b600182019050919050565b7f56616c7565206e6f7420657175616c20746f20746f74616c206465706f73697460008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000610daa6021836109e9565b9150610db582610d4e565b604082019050919050565b60006020820190508181036000830152610dd981610d9d565b905091905056fea2646970667358221220815a0e75e48e74ce13128b721aa2421932e57cf4e836ed507ddd8b45090a589264736f6c63430008110033'

type NectarVaultConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: NectarVaultConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1

export class NectarVault__factory extends ContractFactory {
  // deno-lint-ignore constructor-super
  constructor(...args: NectarVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<NectarVault> {
    return super.deploy(overrides || {}) as Promise<NectarVault>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): NectarVault {
    return super.attach(address) as NectarVault
  }
  override connect(signer: Signer): NectarVault__factory {
    return super.connect(signer) as NectarVault__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): NectarVaultInterface {
    return new utils.Interface(_abi) as NectarVaultInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): NectarVault {
    return new Contract(address, _abi, signerOrProvider) as NectarVault
  }
}
