/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from '../deps.ts'
import type { FunctionFragment, Result, EventFragment } from '../deps.ts'
import type { Listener, Provider } from '../deps.ts'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common.ts'

export interface NectarVaultInterface extends utils.Interface {
  functions: {
    'balanceOf(address)': FunctionFragment
    'deposit(address[],uint256[])': FunctionFragment
    'totalDepositsFor(address)': FunctionFragment
    'withdraw()': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'balanceOf' | 'deposit' | 'totalDepositsFor' | 'withdraw'): FunctionFragment

  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(functionFragment: 'totalDepositsFor', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalDepositsFor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Withdrawal(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Withdrawal'): EventFragment
}

export interface WithdrawalEventObject {
  recipient: string
  amount: BigNumber
}
export type WithdrawalEvent = TypedEvent<[string, BigNumber], WithdrawalEventObject>

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>

export interface NectarVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: NectarVaultInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    balanceOf(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    deposit(
      recipients_: PromiseOrValue<string>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    totalDepositsFor(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>
  }

  balanceOf(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  deposit(
    recipients_: PromiseOrValue<string>[],
    amounts_: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  totalDepositsFor(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  callStatic: {
    balanceOf(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    deposit(
      recipients_: PromiseOrValue<string>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>

    totalDepositsFor(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    withdraw(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Withdrawal(address,uint256)'(recipient?: null, amount?: null): WithdrawalEventFilter
    Withdrawal(recipient?: null, amount?: null): WithdrawalEventFilter
  }

  estimateGas: {
    balanceOf(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    deposit(
      recipients_: PromiseOrValue<string>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    totalDepositsFor(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    balanceOf(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    deposit(
      recipients_: PromiseOrValue<string>[],
      amounts_: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    totalDepositsFor(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>
  }
}
